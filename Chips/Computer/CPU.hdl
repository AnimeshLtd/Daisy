/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
  IN inM[16],         // M value input  (M = contents of RAM[A])
    instruction[16],  // Instruction for execution
    // Signals whether to re-start the current program (reset==1) or continue executing the current program (reset==0)
    reset; 

  OUT outM[16],      // M value output
    writeM,          // Write to M? 
    addressM[15],    // Address in data memory (of M)
    pc[15];          // address of next instruction

  PARTS:
  // Flags to indicate instruction type
  Not(in=instruction[15], out=aInstruction);  // if msb is 0, it's an aInstruction
  Not(in=aInstruction, out=cInstruction);

  // A register
  Mux16(a=instruction, b=outMFeedback, sel=cInstruction, out=Ain);
  // instruction[5] is the destination bit for this register in a C-instruction
  Or(a=aInstruction, b=instruction[5], out=loadA); 
  ARegister(in=Ain, load=loadA, out=A);

  // D register
  // instruction[4] is destination bit for this register in a cInstruction
  And(a=cInstruction, b=instruction[4], out=loadD);
  DRegister(in=outMFeedback, load=loadD, out=D);

  // ALU
  Mux16(a=A, b=inM, sel=instruction[12], out=AorM);   // instruction[12] bit determines one of the ALU inputs
  ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outMFeedback, zr=zr, ng=ng);

  // RAM write instruction
  And(a=cInstruction, b=instruction[3], out=writeM); // instruction[3] is destination bit for RAM
  And16(a=A, b=A, out[0..14]=addressM);  // Destination memory address is the value stored in A register

  //
  //  Jump control logic
  //  Driven by the bits 0..2 in the c-instruction, also called the jump bits
  //
  Or(a=ng, b=zr, out=jumpw1);
  Not(in=jumpw1, out=positive);

  And(a=positive, b=instruction[0], out=jgt); // > 0
  And(a=zr, b=instruction[1], out=jeq);       // = 0
  Or(a=jgt, b=jeq, out=jge);                  // ≥ 0
  And(a=ng, b=instruction[2], out=jlt);       // < 0
  Or(a=jgt, b=jlt, out=jne);                  // ≠ 0
  Or(a=jlt, b=jeq, out=jle);                  // ≤ 0

  Mux8Way16(
    a=false, 
    b[0]=jgt, 
    c[0]=jeq, 
    d[0]=jge,
    e[0]=jlt,
    f[0]=jne,
    g[0]=jle,
    h=true, 
    sel=instruction[0..2], 
    out[0]=jump
  );
  And(a=cInstruction, b=jump, out=loadPC);

  PC(in=A, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}